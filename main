#include <stdio.h>
#include <stdbool.h>

void convert_choice (int *spot, int *spot_col);
int space_available(int *rows, int *columns, char tic_tac[3][3]);
void full_board(int *rows, int *columns, char tic_tac[3][3]);
int declare_winner(char tic_tac[3][3]);

int main( ){
	char tic_tac [3][3]; //array for board
	int rows, columns; //spaces of board
	int choice = 0; //test to loop user choice
	bool test_bool; //test boolean value
	int winner = 0; //test for winner
	
	printf("You will play tic-tac-toe but your selection\n");
	printf("is pre-determined based on your row and column selection.\n\n");
	
	//loop to fill array with spaces
	for(rows = 0; rows < 3; rows++){
		for(columns = 0; columns < 3; columns++){
		tic_tac [rows][columns] = ' ';
	}
}

while(winner != 1 && winner != 2){
//get user choice, place choice, display board after each turn
	for(choice = 0; choice < 9; choice++){
	
	printf("\n");
	printf("Enter row: ");
	scanf(" %d", &rows);
	printf("Enter column: ");
	scanf(" %d", &columns);
	
	convert_choice(&rows, &columns);
	
	printf("\n");
	
	test_bool = space_available(&rows, &columns, tic_tac);
	
	if(test_bool == false){
		if(choice == 0 || choice == 2 || choice == 4 || choice == 6 || choice == 8){
		tic_tac[rows][columns] = 'X';
		}
		if(choice == 1 || choice == 3 || choice == 5 || choice == 7){
			tic_tac[rows][columns] = 'O';
		}
	}
	else {
		choice -= 1;
	}

	//display board
	printf("\nTic-Tac-Toe:\n\n");
	printf(" %c | %c | %c\n", tic_tac[0][0], tic_tac[0][1], tic_tac[0][2]);
      printf("---+---+---\n");
      printf(" %c | %c | %c\n", tic_tac[1][0], tic_tac[1][1], tic_tac[1][2]);
      printf("---+---+---\n");
      printf(" %c | %c | %c\n", tic_tac[2][0], tic_tac[2][1], tic_tac[2][2]);
      
winner = declare_winner(tic_tac);

  if(winner == 1){
  	printf("Player X wins!\n");
  	break;
  }
  	else if(winner == 2){
  		printf("Player O wins!\n");
  		break;
	  }
  }
  
  if(winner != 1 && winner != 2){
  	printf("It's a tie.\n'");
  }
}

  printf("\n");
  full_board(&rows, &columns, tic_tac);

return 0;
}

//function to convert user choice to index element
void convert_choice (int *spot, int *spot_col){
	
		if(*spot == 1 && *spot_col == 1){
		*spot = 1-1;
		*spot_col = 1-1;
	}
	else if(*spot == 1 && *spot_col == 2){
		*spot = 1-1;
		*spot_col = 2-1; 
	}
	else if(*spot == 1 && *spot_col == 3){
		*spot = 1-1;
		*spot_col = 3-1;
	}
	else if(*spot == 2 && *spot_col == 1){
		*spot = 2-1;
		*spot_col = 1-1; 
	}
	else if(*spot == 2 && *spot_col == 2){
		*spot = 2-1;
		*spot_col = 2-1; 
	}
	else if(*spot == 2 && *spot_col == 3){
		*spot = 2-1;
		*spot_col = 3-1;
	}
	else if(*spot == 3 && *spot_col == 1){
		*spot = 3-1;
		*spot_col = 1-1;
	}
	else if(*spot == 3 && *spot_col == 2){
		*spot = 3-1;
		*spot_col = 2-1;
	}
	else{ //spot == 3, spot_col == 3
		*spot = 3-1;
		*spot_col = 3-1;
	}
	return;
}

//function to delcare winner 
int declare_winner(char tic_tac[3][3]){
  
  if(tic_tac[0][0] == 'X' && tic_tac[1][1] == 'X' && tic_tac[2][2] == 'X'){
  	return 1;
  }
  else if(tic_tac[2][0] == 'X' && tic_tac[1][1] == 'X' && tic_tac[0][2] == 'X'){
  	return 1;
  }
  else if(tic_tac[0][0] == 'O' && tic_tac[1][1] == 'O' && tic_tac[2][2] == 'O'){
  	return 2;
  }
  else if(tic_tac[2][0] == 'O' && tic_tac[1][1] == 'O' && tic_tac[0][2] == 'O'){
  	return 2;
  }
  else if(tic_tac[0][0] == 'X' && tic_tac[0][1] == 'X' && tic_tac[0][2] == 'X'){
  	return 1;
  }
  else if(tic_tac[1][0] == 'X' && tic_tac[1][1] == 'X' && tic_tac[1][2] == 'X'){
  	return 1;
  }
  else if(tic_tac[2][0] == 'X' && tic_tac[2][1] == 'X' && tic_tac[2][2] == 'X'){
  	return 1;
  }
  else if(tic_tac[0][0] == 'O' && tic_tac[0][1] == 'O' && tic_tac[0][2] == 'O'){
  	return 2;
  }
  else if(tic_tac[1][0] == 'O' && tic_tac[1][1] == 'O' && tic_tac[1][2] == 'O'){
  	return 2;
  }
  else if(tic_tac[2][0] == 'O' && tic_tac[2][1] == 'O' && tic_tac[2][2] == 'O'){
  	return 2;
  }
  else if(tic_tac[0][0] == 'X' && tic_tac[1][0] == 'X' && tic_tac[2][0] == 'X'){
  	return 1;
  }
  else if(tic_tac[0][1] == 'X' && tic_tac[1][1] == 'X' && tic_tac[2][1] == 'X'){
  	return 1;
  }
  else if(tic_tac[0][2] == 'X' && tic_tac[1][2] == 'X' && tic_tac[2][2] == 'X'){
  	return 1;
  }
  else if(tic_tac[0][0] == 'O' && tic_tac[1][0] == 'O' && tic_tac[2][0] == 'O'){
  	return 2;
  }
  else if(tic_tac[0][1] == 'O' && tic_tac[1][1] == 'O' && tic_tac[2][1] == 'O'){
  	return 2;
  }
  else if(tic_tac[0][2] == 'O' && tic_tac[1][2] == 'O' && tic_tac[2][2] == 'O'){
  	return 2;
  }
  return 0;
}

//function to determine if cell is occupied
int space_available(int *rows, int *columns, char tic_tac[3][3])
{
	if(tic_tac [*rows][*columns] == 'X' || tic_tac [*rows][*columns] == 'O'){
		printf("Space occupied.\n\n");
		return true;
	}
	else {
		printf("Valid choice.\n\n");
		return false;
	}
}

//function to declare board is full
void full_board(int *rows, int *columns, char tic_tac[3][3])
{
	if (tic_tac [*rows][*columns] != ' '){
				printf("Board is full.\n\n");
			}
			else {
				printf("Make a selection.\n\n");
			}

return;
}
